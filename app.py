import streamlit as st
import random
from questions import all_questions

st.set_page_config(
    page_title="–¢–µ—Å—Ç—ã –¥–ª—è 4 –∫–ª–∞—Å—Å–∞",
    page_icon="üìö",
    layout="centered",
    initial_sidebar_state="expanded",
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è CSS
def local_css():
    st.markdown("""
    <style>
    .main {
        padding: 2rem;
        border-radius: 10px;
    }
    .stButton>button {
        width: 100%;
        border-radius: 5px;
        background-color: #4CAF50;
        color: white;
        font-size: 16px;
        padding: 10px;
        margin-top: 10px;
    }
    .correct-answer {
        color: green;
        font-weight: bold;
        padding: 10px;
        border-radius: 5px;
        background-color: #EAFFEA;
    }
    .wrong-answer {
        color: red;
        font-weight: bold;
        padding: 10px;
        border-radius: 5px;
        background-color: #FFEBEE;
    }
    .subject-btn {
        background-color: #F0F8FF;
        padding: 20px;
        border-radius: 10px;
        margin-bottom: 10px;
        text-align: center;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: all 0.3s;
    }
    .subject-btn:hover {
        transform: translateY(-5px);
        box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);
    }
    .header {
        text-align: center;
        color: #3366CC;
        margin-bottom: 30px;
    }
    .final-score {
        font-size: 24px;
        text-align: center;
        padding: 20px;
        border-radius: 10px;
        margin-top: 20px;
        background-color: #E8F5E9;
    }
    .emoji-title {
        font-size: 48px;
        text-align: center;
        margin-bottom: 10px;
    }
    </style>
    """, unsafe_allow_html=True)

def main():
    local_css()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
    if 'current_subject' not in st.session_state:
        st.session_state.current_subject = None
    if 'questions' not in st.session_state:
        st.session_state.questions = []
    if 'current_question_idx' not in st.session_state:
        st.session_state.current_question_idx = 0
    if 'score' not in st.session_state:
        st.session_state.score = 0
    if 'answered' not in st.session_state:
        st.session_state.answered = False
    if 'selected_option' not in st.session_state:
        st.session_state.selected_option = None
    if 'test_complete' not in st.session_state:
        st.session_state.test_complete = False
    if 'question_count' not in st.session_state:
        st.session_state.question_count = 10
    
    # –≠–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    subject_emoji = {
        "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": "üî¢",
        "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫": "üá∑üá∫",
        "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫": "üá¨üáß",
        "–ö–∞–∑–∞—Ö—Å–∫–∏–π —è–∑—ã–∫": "üá∞üáø",
        "–ü–æ–∑–Ω–∞–Ω–∏–µ –º–∏—Ä–∞": "üåç",
        "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞": "üìö"
    }
    
    # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    st.markdown('<h1 class="header">–¢–µ—Å—Ç—ã –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤ 4 –∫–ª–∞—Å—Å–∞</h1>', unsafe_allow_html=True)
    
    if st.session_state.current_subject is None:
        st.markdown('<div class="emoji-title">üìö‚úèÔ∏èüéì</div>', unsafe_allow_html=True)
        st.write("### –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        
        # –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ç–µ—Å—Ç–∞
        st.session_state.question_count = st.slider(
            "–í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤:", 
            min_value=5, 
            max_value=20, 
            value=10,
            step=5
        )
        
        col1, col2 = st.columns(2)
        
        subjects_list = list(all_questions.keys())
        half_count = len(subjects_list) // 2
        
        with col1:
            for subject in subjects_list[:half_count]:
                if st.button(f"{subject_emoji[subject]} {subject}", key=subject):
                    st.session_state.current_subject = subject
                    st.session_state.questions = random.sample(
                        all_questions[subject], 
                        min(st.session_state.question_count, len(all_questions[subject]))
                    )
                    st.session_state.current_question_idx = 0
                    st.session_state.score = 0
                    st.session_state.answered = False
                    st.session_state.test_complete = False
                    st.experimental_rerun()
        
        with col2:
            for subject in subjects_list[half_count:]:
                if st.button(f"{subject_emoji[subject]} {subject}", key=subject):
                    st.session_state.current_subject = subject
                    st.session_state.questions = random.sample(
                        all_questions[subject], 
                        min(st.session_state.question_count, len(all_questions[subject]))
                    )
                    st.session_state.current_question_idx = 0
                    st.session_state.score = 0
                    st.session_state.answered = False
                    st.session_state.test_complete = False
                    st.experimental_rerun()
    else:
        # –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        st.markdown(f'<h2 class="header">{subject_emoji[st.session_state.current_subject]} {st.session_state.current_subject}</h2>', unsafe_allow_html=True)
        
        if not st.session_state.test_complete:
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            progress = st.progress((st.session_state.current_question_idx) / len(st.session_state.questions))
            st.write(f"–í–æ–ø—Ä–æ—Å {st.session_state.current_question_idx + 1} –∏–∑ {len(st.session_state.questions)}")
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            current_q = st.session_state.questions[st.session_state.current_question_idx]
            st.write(f"### {current_q['question']}")
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
            if not st.session_state.answered:
                for i, option in enumerate(current_q['options']):
                    if st.button(option, key=f"option_{i}"):
                        st.session_state.selected_option = option
                        st.session_state.answered = True
                        if option == current_q['correct_answer']:
                            st.session_state.score += 1
                        st.experimental_rerun()
            else:
                # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–≤–µ—Ç–∞
                for option in current_q['options']:
                    if option == current_q['correct_answer']:
                        st.markdown(f'<div class="correct-answer">‚úÖ {option}</div>', unsafe_allow_html=True)
                    elif option == st.session_state.selected_option and option != current_q['correct_answer']:
                        st.markdown(f'<div class="wrong-answer">‚ùå {option}</div>', unsafe_allow_html=True)
                    else:
                        st.write(option)
                
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                if st.session_state.current_question_idx < len(st.session_state.questions) - 1:
                    if st.button("–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"):
                        st.session_state.current_question_idx += 1
                        st.session_state.answered = False
                        st.session_state.selected_option = None
                        st.experimental_rerun()
                else:
                    if st.button("–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç"):
                        st.session_state.test_complete = True
                        st.experimental_rerun()
        else:
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞
            percentage = (st.session_state.score / len(st.session_state.questions)) * 100
            st.markdown('<div class="emoji-title">üéâ</div>', unsafe_allow_html=True)
            st.markdown(f'<div class="final-score">–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {st.session_state.score} –∏–∑ {len(st.session_state.questions)} ({percentage:.1f}%)</div>', unsafe_allow_html=True)
            
            # –û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if percentage >= 90:
                st.markdown('<div style="text-align: center; font-size: 24px; color: green;">–û—Ç–ª–∏—á–Ω–æ! üëç</div>', unsafe_allow_html=True)
            elif percentage >= 70:
                st.markdown('<div style="text-align: center; font-size: 24px; color: blue;">–•–æ—Ä–æ—à–æ! üòä</div>', unsafe_allow_html=True)
            elif percentage >= 50:
                st.markdown('<div style="text-align: center; font-size: 24px; color: orange;">–ù–µ–ø–ª–æ—Ö–æ! –ú–æ–∂–Ω–æ –ª—É—á—à–µ! üôÇ</div>', unsafe_allow_html=True)
            else:
                st.markdown('<div style="text-align: center; font-size: 24px; color: red;">–ù–∞–¥–æ –±–æ–ª—å—à–µ —É—á–∏—Ç—å—Å—è! üìö</div>', unsafe_allow_html=True)
            
            # –ö–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
            col1, col2 = st.columns(2)
            
            with col1:
                if st.button("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é"):
                    st.session_state.current_subject = None
                    st.experimental_rerun()
            
            with col2:
                if st.button("–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –µ—â–µ —Ä–∞–∑"):
                    st.session_state.questions = random.sample(
                        all_questions[st.session_state.current_subject], 
                        min(st.session_state.question_count, len(all_questions[st.session_state.current_subject]))
                    )
                    st.session_state.current_question_idx = 0
                    st.session_state.score = 0
                    st.session_state.answered = False
                    st.session_state.test_complete = False
                    st.experimental_rerun()

if __name__ == "__main__":
    main() 